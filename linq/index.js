'use strict';

Object.defineProperties(module.exports, {
  aggregate: { value: require(`@kingjs/linq.aggregate`) },
  all: { value: require(`@kingjs/linq.all`) },
  any: { value: require(`@kingjs/linq.any`) },
  append: { value: require(`@kingjs/linq.append`) },
  average: { value: require(`@kingjs/linq.average`) },
  concat: { value: require(`@kingjs/linq.concat`) },
  contains: { value: require(`@kingjs/linq.contains`) },
  count: { value: require(`@kingjs/linq.count`) },
  defaultEqual: { value: require(`@kingjs/linq.default-equal`) },
  defaultLessThan: { value: require(`@kingjs/linq.default-less-than`) },
  distinct: { value: require(`@kingjs/linq.distinct`) },
  elementAt: { value: require(`@kingjs/linq.element-at`) },
  elementAtOrUndefined: { value: require(`@kingjs/linq.element-at-or-undefined`) },
  empty: { value: require(`@kingjs/linq.empty`) },
  except: { value: require(`@kingjs/linq.except`) },
  first: { value: require(`@kingjs/linq.first`) },
  firstOrUndefined: { value: require(`@kingjs/linq.first-or-undefined`) },
  groupBy: { value: require(`@kingjs/linq.group-by`) },
  groupJoin: { value: require(`@kingjs/linq.group-join`) },
  intersect: { value: require(`@kingjs/linq.intersect`) },
  join: { value: require(`@kingjs/linq.join`) },
  last: { value: require(`@kingjs/linq.last`) },
  lastOrUndefined: { value: require(`@kingjs/linq.last-or-undefined`) },
  max: { value: require(`@kingjs/linq.max`) },
  min: { value: require(`@kingjs/linq.min`) },
  orderBy: { value: require(`@kingjs/linq.order-by`) },
  orderByDescending: { value: require(`@kingjs/linq.order-by-descending`) },
  prepend: { value: require(`@kingjs/linq.prepend`) },
  range: { value: require(`@kingjs/linq.range`) },
  repeat: { value: require(`@kingjs/linq.repeat`) },
  select: { value: require(`@kingjs/linq.select`) },
  selectMany: { value: require(`@kingjs/linq.select-many`) },
  sequenceEqual: { value: require(`@kingjs/linq.sequence-equal`) },
  single: { value: require(`@kingjs/linq.single`) },
  singleOrUndefined: { value: require(`@kingjs/linq.single-or-undefined`) },
  skip: { value: require(`@kingjs/linq.skip`) },
  skipWhile: { value: require(`@kingjs/linq.skip-while`) },
  sum: { value: require(`@kingjs/linq.sum`) },
  take: { value: require(`@kingjs/linq.take`) },
  takeWhile: { value: require(`@kingjs/linq.take-while`) },
  thenBy: { value: require(`@kingjs/linq.then-by`) },
  thenByDescending: { value: require(`@kingjs/linq.then-by-descending`) },
  toArray: { value: require(`@kingjs/linq.to-array`) },
  toDictionary: { value: require(`@kingjs/linq.to-dictionary`) },
  toLookup: { value: require(`@kingjs/linq.to-lookup`) },
  union: { value: require(`@kingjs/linq.union`) },
  where: { value: require(`@kingjs/linq.where`) },
  zip: { value: require(`@kingjs/linq.zip`) },
});